name: Infra build and deployment 

on: 
  workflow_dispatch:
    inputs:
      branch:
        type: choice
        options:
        - develop
        - master
permissions:
  contents: read
env:
  TF_LOG: INFO
  TF_INPUT: false
  
jobs: 
  pr-infra-check:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read


    steps:

    - name: configure aws credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
          role-to-assume: arn:aws:iam::account_number:role/github-actions #change to reflect your IAM role’s ARN
          aws-region: ap-southeast-1
          role-session-name: AWSSession
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout Repo
      uses: actions/checkout@v4
      with:
          repository: TI-Tech-31/actions
          token: ${{ secrets.TTOKEN }}
          path:  infra
          ref: ${{ github.event.inputs.branch }}  # Use the branch provided from input
      

    # Install the selected version of Terraform CLI 
    - name: Setup Terraform with specified version on the runner
      uses: hashicorp/setup-terraform@v2
      with:
          terraform_version: 1.5.7
          terraform_wrapper: false


    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform init
      id: init
      run: |
        
          cd /home/runner/work/python_codes/python_codes/infra/terraform
          full_ref="${{ github.ref }}"
          branch_name=$(echo $full_ref | cut -d'/' -f 3)
          terraform init
          echo " Destination branch name is : $branch_name"
          if [[ "$branch_name" == "develop" ]]; then
            echo "Setting Terraform workspace to 'uat'"
            terraform workspace select uat || terraform workspace new uat
          elif [[ "$branch_name" == "master" ]]; then
            echo "Setting Terraform workspace to 'prod'"
            terraform workspace select prod || terraform workspace new prod
          else
            echo "Branch not supported for Terraform workspace selection"
            exit 1
          fi 

    # Run a terraform plan
    - name: Terraform plan
      id: plan
      continue-on-error: false
      run: |
          cd /home/runner/work/python_codes/python_codes/infra/terraform
          terraform plan  -out=myplan
          
    - name: Upload file to artifact
      uses: actions/upload-artifact@v3
      with:
          name: my-file
          path: /home/runner/work/python_codes/python_codes/infra/terraform/myplan
          
  pr-infra-deploy:
  
    runs-on: ubuntu-latest
    environment: Approve
    permissions:
      id-token: write
      contents: read
        
    needs: pr-infra-check
   
    steps:
    - name: configure aws credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
          role-to-assume: arn:aws:iam::account_number:role/github-actions #change to reflect your IAM role’s ARN
          aws-region: ap-southeast-1
          role-session-name: AWSSession
          
    - name: Checkout Repo
      uses: actions/checkout@v4
      with:
          repository: TI-Tech-31/actions
          token: ${{ secrets.TTOKEN }}
          path:  infra
          ref: ${{ github.event.inputs.branch }} # Use the branch provided from input
          
    - name: Setup Terraform with specified version on the runner
      uses: hashicorp/setup-terraform@v2
      with:
          terraform_version: 1.5.7
          terraform_wrapper: false

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform init
      id: init
      run: |
        
          cd /home/runner/work/python_codes/python_codes/infra/terraform
          full_ref="${{ github.ref }}"
          branch_name=$(echo $full_ref | cut -d'/' -f 3)
          terraform init
          echo " Destination branch name is : $branch_name"
          if [[ "$branch_name" == "develop" ]]; then
            echo "Setting Terraform workspace to 'uat'"
            terraform workspace select uat || terraform workspace new uat
          elif [[ "$branch_name" == "master" ]]; then
            echo "Setting Terraform workspace to 'prod'"
            terraform workspace select prod || terraform workspace new prod
          else
            echo "Branch not supported for Terraform workspace selection."
            exit 1
          fi 
          
    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
          name: my-file
          path: /home/runner/work/python_codes/python_codes/infra/terraform         
    - name: Terraform Apply
      run: |
           cd /home/runner/work/python_codes/python_codes/infra/terraform/
           terraform apply -auto-approve -input=false myplan
